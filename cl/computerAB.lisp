(defun getA(answer1 answer2)
  (let ((countA 0))
    (if (and (equal 4 (length answer1)) (equal 4 (length answer2)))
        (loop for x from 0 to 3
            do (let ((char1 (char answer1 x)) (char2 (char answer2 x)))
               (if (equal char1 char2)
                   (setf countA (+ 1 countA))
               )
            )
        )
    )
    (return-from getA countA)
  )
)

(defun getB(answer1 answer2)
  (let ((countB 0))
    (if (and (equal 4 (length answer1)) (equal 4 (length answer2)))
        (loop for x from 0 to 3
            do (loop for y from 0 to 3
                do (let ((char1 (char answer1 x)) (char2 (char answer2 y)))
                     (if (equal char1 char2)
                         (if (/= x y)
                             (setf countB (+ 1 countB))
                         )
                     )
                )
            )
        )
    )
    (return-from getB countB)
  )    
)

(defvar total '())
(loop for u from 0 to 9
   do (loop for v from 0 to 9
     do (loop for w from 0 to 9
        do (loop for x from 0 to 9
            do (if (and (/= u v) (/= u w) (/= u x) (/= v w) (/= v x) (/= w x))
               (setq total (append total (list (format NIL "~d~d~d~d" u v w x))))
            )
        )
     )
   )
)
(setf *random-state* (make-random-state t))
(defvar random-value (random (list-length total)))
(defvar answer (format NIL "~4,'0d" (nth random-value total)))
(defvar a-value 0)
(defvar b-value 0)
(loop (format t "My answer is: ~d~%" answer)
    (block mainblock
        (format t "Please input the A value: ")
        (finish-output nil)
        (setf a-value (read))
        (if (equal NIL (numberp a-value))
            (return-from mainblock)
        )
        (format t "Please input the B value: ")
        (finish-output nil)
        (setf b-value (read))
        (if (equal NIL (numberp b-value))
            (return-from mainblock)
        )        
        (if (and (= a-value 4) (= b-value 0))
            (let ((message "Game is completed."))
                 (write-line message)
                 (return)
            )
        )
        (let ((newtotal '()) (totalsize (list-length total)))
            (setf totalsize (- totalsize 1))
            (loop for index from 0 to totalsize
                do (let ((test-value (nth index total)) (temp-a-value 0) (temp-b-value 0))
                    (setf temp-a-value (getA test-value answer))
                    (setf temp-b-value (getB test-value answer))
                    (if (and (= a-value temp-a-value) (= b-value temp-b-value))
                        (setq newtotal (append newtotal (list test-value)))
                    )
                )
            )
            (setf total newtotal)
            (if (equal (list-length total) 0)
                (block checklength
                    (write-line "I cannot valid answer, stop game.")
                    (quit)
                )
                (setf answer (format NIL "~4,'0d" (nth 0 total)))
            )
        )
    )
    (terpri)
)
